#include<stdio.h>
int min(int,int );
void floyds(int p[10][10],int n)
{
   int i,j,k;
   for(k=1;k<=n;k++)
   for(i=1;i<=n;i++)
   for(j=1;j<=n;j++)
   if(i==j)
      p[i][j]=0;
   else 
      p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}
int min(int a, int b)
{
   if(a<b)
      return(a);
   else
      return(b);
}
void main()
{
   int p[10][10],w,n,e,u,v,i,j;
   printf("\nEnter the number of vertices:");
   scanf("%d",&n);
   printf("\nEnter the number of edges:\n");
   scanf("%d",&e);
   for(i=1;i<=n;i++)
   {
      for(j=1;j<=n;j++)
         p[i][j]=999;
   }
   for(i=1;i<=e;i++)
   {
       printf("\nEnter the end vertices of edge %d with its weight \n",i);
       scanf("%d%d%d",&u,&v,&w);
       p[u][v]=w;
   }
   printf("\nMatrix of input data:\n");
   for(i=1;i<=n;i++)
   {
      for(j=1;j<=n;j++)
         printf("%d\t",p[i][j]);
         printf("\n");
   }
   floyds(p,n);
   printf("\nTransitive closure:\n");
   for(i=1;i<=n;i++)
   {
   for(j=1;j<=n;j++)
         printf("%d\t",p[i][j]);
         printf("\n");
   }
   printf("\nThe shortest paths are:\n");
   for(i=1;i<=n;i++)
   for(j=1;j<=n;j++)
   {
      if(i!=j)
         printf("\n<%d,%d>=%d",i,j,p[i][j]);
   }
}



touch file.txt
touch lab.java
git status
git rm ---cached lab.java
git add .
git commit -m ""
git remote -v
git push -u origin matster
git remote remove origin 




<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-
4.0.0.xsd">

<modelVersion>4.0.0</modelVersion><groupId>com.example</groupId>
<artifactId>maven-example</artifactId>
<version>1.0-SNAPSHOT</version><dependencies>

<dependency>
<groupId>junit</groupId>
<artifactId>junit</artifactId>
<version>4.12</version>
<scope>test</scope>
</dependency>
</dependencies><build>
<plugins>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<version>3.8.1</version>
<configuration>
<source>1.8</source>
<target>1.8</target>
</configuration>
</plugin>
</plugins>
</build>
</project>



package com.example;public class App {
public static void main(String[] args) {
System.out.println("Hello, Maven");
System.out.println("This is the simple realworld example....");
int a = 5;
int b = 10;
System.out.println("Sum of " + a + " and " + b + " is " + sum(a, b));
}
public static int sum(int x, int y) {
return x + y;
}




plugins {
id 'java'
}

group = 'com.example'

version = '1.0-SNAPSHOT'

repositories {
mavenCentral()
}

dependencies {
testImplementation 'junit:junit:4.12'
}

task run(type: JavaExec) {
main = 'com.example.App'
classpath = sourceSets.main.runtimeClasspath
}





pipeline {
agent any
stages {
stage('Checkout')
{ steps {

// Check out code from Git repository
git url: 'https://github.com/yourusername/your-mavenproject.
git', branch: 'main'
}

}
stage('Build')
{ steps {
// Run Maven build
sh 'mvn clean package'
}
}
stage('Test') {

steps {
// Optionally, separate test execution if needed
sh 'mvn test'
}
}
}
post {
always {
// Archive test reports
junit '**/target/surefire-reports/*.xml'
}
success {
echo 'Build and tests succeeded!'
}
failure {
echo 'Build or tests failed.'
}
}
}
   
